// <auto-generated />
using System;
using BlushMe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlushMe.Migrations
{
    [DbContext(typeof(BlushDbContext))]
    partial class BlushDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("BlushMe.Model.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<int>("LocationId");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Zipcode");

                    b.HasKey("AddressId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("BlushMe.Model.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<string>("ClientId1");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeId1");

                    b.Property<DateTime>("End");

                    b.Property<int?>("LocationId");

                    b.Property<int>("MetaId");

                    b.Property<string>("ServicesId");

                    b.Property<DateTime>("Start");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("LocationId");

                    b.HasIndex("MetaId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BlushMe.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BlushMe.Model.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("Membership");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<long?>("Points");

                    b.Property<int?>("Status");

                    b.HasKey("ClientId");

                    b.HasIndex("LocationId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BlushMe.Model.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int?>("LocationId");

                    b.Property<string>("MobileProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("ServeId");

                    b.HasKey("EmployeeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BlushMe.Model.Hours", b =>
                {
                    b.Property<int>("HoursId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Day");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeId1");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("HoursId");

                    b.HasIndex("EmployeeId1");

                    b.ToTable("Hours");
                });

            modelBuilder.Entity("BlushMe.Model.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("BlushMe.Model.Meta", b =>
                {
                    b.Property<int>("MetaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Location");

                    b.Property<string>("Note");

                    b.HasKey("MetaId");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("BlushMe.Model.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Active");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<int>("Length");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int?>("ServiceHistoryId");

                    b.HasKey("ServiceId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceHistoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BlushMe.Model.ServiceHistory", b =>
                {
                    b.Property<int>("ServiceHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeId1");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.HasKey("ServiceHistoryId");

                    b.HasIndex("EmployeeId1");

                    b.ToTable("ServiceHistory");
                });

            modelBuilder.Entity("BlushMe.Model.WorkHour", b =>
                {
                    b.Property<int>("WorkHourId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Close");

                    b.Property<int>("Day");

                    b.Property<int>("LocationId");

                    b.Property<DateTime>("Open");

                    b.HasKey("WorkHourId");

                    b.HasIndex("LocationId");

                    b.ToTable("WorkHour");
                });

            modelBuilder.Entity("BlushMe.Model.Address", b =>
                {
                    b.HasOne("BlushMe.Model.Location", "Location")
                        .WithOne("Address")
                        .HasForeignKey("BlushMe.Model.Address", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlushMe.Model.Appointment", b =>
                {
                    b.HasOne("BlushMe.Model.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId1");

                    b.HasOne("BlushMe.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("BlushMe.Model.Location")
                        .WithMany("Appointments")
                        .HasForeignKey("LocationId");

                    b.HasOne("BlushMe.Model.Meta", "Meta")
                        .WithMany()
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlushMe.Model.Client", b =>
                {
                    b.HasOne("BlushMe.Model.Location")
                        .WithMany("Clients")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("BlushMe.Model.Employee", b =>
                {
                    b.HasOne("BlushMe.Model.Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("BlushMe.Model.Hours", b =>
                {
                    b.HasOne("BlushMe.Model.Employee", "Employee")
                        .WithMany("Hours")
                        .HasForeignKey("EmployeeId1");
                });

            modelBuilder.Entity("BlushMe.Model.Service", b =>
                {
                    b.HasOne("BlushMe.Model.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlushMe.Model.Location", "Locations")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlushMe.Model.ServiceHistory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceHistoryId");
                });

            modelBuilder.Entity("BlushMe.Model.ServiceHistory", b =>
                {
                    b.HasOne("BlushMe.Model.Employee", "Employee")
                        .WithMany("ServiceHistory")
                        .HasForeignKey("EmployeeId1");
                });

            modelBuilder.Entity("BlushMe.Model.WorkHour", b =>
                {
                    b.HasOne("BlushMe.Model.Location", "Location")
                        .WithMany("WorkHours")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
